<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="review_mapper">

	<!-- 글 작성 -->
	<insert id="insert_review" parameterType="ReviewDto">
		INSERT INTO review_bbs (review_id, user_id, plan_id, title, content, stars)
		VALUES ( review_id_seq.NEXTVAL, #{userId} , #{planId}, #{title}, #{content},  #{stars})
	</insert>
	
	<!-- 작성한 글번호 반환 -->
	<select id="select_review_id" resultType="ReviewDto">
		SELECT review_id
		FROM review_bbs
		WHERE user_id = #{userId}
		AND plan_id = #{planId}
		AND delete_at = 'N'
	</select>
	
	<!-- 글 임시저장 -->
	<insert id="insert_review_temp" parameterType="ReviewDto">
		INSERT INTO review_temp (user_id, plan_id, stars, title, content)
		VALUES ( #{userId}, #{planId}, #{stars}, #{title}, #{content} )
	</insert>
	
	<!-- 임시저장 불러오기 -->
	<select id="select_review_temp" resultType="ReviewDto">
		SELECT user_id, plan_id, ROUND(stars, 1) AS stars, title, content
		FROM review_temp
		WHERE user_id = #{userId}
	</select>
	
	<!-- 글 임시저장 변경 -->
	<update id="update_review_temp">
		UPDATE review_temp
		SET title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}
		WHERE user_id = #{userId}
	</update>
	
	<!-- 임시저장 삭제 -->
	<delete id="delete_review_temp">
		DELETE FROM review_temp
		WHERE user_id = #{userId}
	</delete>
	
	<!-- 글목록 불러오기 (+검색기능) (+페이지네이션) -->
	<select id="select_review_list" resultType="ReviewDto" parameterType="hashMap">
		SELECT rb.review_id, rb.user_id, rb.title, TO_CHAR(rb.create_date, 'YY.MM.DD') create_date, rb.views, rb.plan_id, rb.content, 
			   rb.like_count, rb.comment_count, rb.report_count, rb.stars, us.nick, jb.destination, jb.plan_type
		FROM (
			SELECT rb.review_id, rb.user_id, rb.title, rb.create_date, rb.views, rb.like_count, rb.comment_count,
				   rb.report_count, rb.stars, rb.plan_id, rb.delete_at, rb.content, ROWNUM AS rnum
			FROM (
				SELECT rb.review_id, rb.user_id, rb.title, rb.create_date, rb.views, rb.like_count, rb.comment_count,
				   rb.report_count, rb.stars, rb.plan_id, rb.delete_at, rb.content
				FROM review_bbs rb
				JOIN join_board jb ON rb.plan_id = jb.plan_id
				JOIN users us ON rb.user_id = us.user_id
				WHERE 1=1
		 		<if test="searchType == 'domestic'">
					AND jb.plan_type = 0
				</if>
				<if test="searchType == 'overseas'">
					AND jb.plan_type = 1
				</if>
				<if test="searchCondition == 'all'">
					AND ( (rb.title LIKE '%'||#{keyword}||'%') or (rb.content LIKE '%'||#{keyword}||'%')
					   or (us.nick LIKE '%'||#{keyword}||'%') or (jb.destination LIKE '%'||#{keyword}||'%') )
				</if>
				<if test="searchCondition == 'ticon'">
					AND ((rb.title LIKE '%'||#{keyword}||'%') or (rb.content LIKE '%'||#{keyword}||'%'))
				</if>
				<if test="searchCondition == 'user'">
					AND us.nick LIKE '%'||#{keyword}||'%'
				</if>
				<if test="searchCondition == 'destination'">
					AND jb.destination LIKE '%'||#{keyword}||'%'
				</if>
				<if test="searchCondition == 'sessionId'">
					AND us.user_id LIKE #{keyword}
				</if>
				ORDER BY review_id DESC
				) rb
			JOIN join_board jb ON rb.plan_id = jb.plan_id
			JOIN users us ON rb.user_id = us.user_id
			WHERE rb.delete_at = 'N'
			AND rb.report_count &lt;= 5 <!-- 부등호(<)의 XML 엔티티 &lt; -->
			ORDER BY rb.review_id DESC
		) rb
		JOIN join_board jb ON rb.plan_id = jb.plan_id
		JOIN users us ON rb.user_id = us.user_id
		WHERE rnum BETWEEN ( TO_NUMBER( #{page} ) -1 ) * TO_NUMBER( #{dataPerPage} ) + 1 
						AND TO_NUMBER( #{page} ) * TO_NUMBER( #{dataPerPage} )
		ORDER BY rb.review_id DESC
	</select>
	
	<!-- 글 개수 불러오기 (페이지네이션에 활용) -->
 	<select id="select_review_count" resultType="Integer" parameterType="hashMap">
		SELECT COUNT(*)
		FROM review_bbs rb
		JOIN join_board jb ON rb.plan_id = jb.plan_id
		JOIN users us ON rb.user_id = us.user_id
 		WHERE 1=1
 		<if test="searchType == 'domestic'">
			AND jb.plan_type = 0
		</if>
		 <if test="searchType == 'overseas'">
			AND jb.plan_type = 1
		</if>
		<if test="searchCondition == 'all'">
			AND ( (rb.title LIKE '%'||#{keyword}||'%') or (rb.content LIKE '%'||#{keyword}||'%')
			   or (us.nick LIKE '%'||#{keyword}||'%') or (jb.destination LIKE '%'||#{keyword}||'%') )
		</if>
		<if test="searchCondition == 'ticon'">
			AND ((rb.title LIKE '%'||#{keyword}||'%') or (rb.content LIKE '%'||#{keyword}||'%'))
		</if>
		<if test="searchCondition == 'user'">
			AND us.nick LIKE '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'destination'">
			AND jb.destination LIKE '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'sessionId'">
			AND us.user_id LIKE #{keyword}
		</if>
		AND rb.delete_at = 'N'
		AND rb.report_count &lt;= 5 <!-- 부등호(<)의 XML 엔티티 &lt; -->
		<!-- ORDER BY rb.review_id DESC -->
	</select>

	<!-- 글상세 불러오기 -->
	<select id="select_review_view" resultType="ReviewDto">
		SELECT rb.review_id, rb.plan_id, rb.user_id, rb.title, rb.content, rb.stars, rb.delete_at, 
			   rb.views, rb.like_count, rb.comment_count, rb.report_count, us.nick, 
			    TO_CHAR(rb.create_date, 'YY.MM.DD HH:MM') create_date,
			    TO_CHAR(rb.update_date, 'YY.MM.DD HH:MM') update_date,
			   jb.destination||'('||TO_CHAR(jb.start_day, 'YY-MM-DD')||'~'||TO_CHAR(jb.end_day, 'YY-MM-DD')||')' AS planInfo
		FROM review_bbs rb
		JOIN join_board jb ON rb.plan_id = jb.plan_id
		JOIN users us ON rb.user_id = us.user_id
 		WHERE review_id = #{reviewId}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="update_review_views_increase">
		UPDATE review_bbs
		SET views =  views + 1
		WHERE review_id = #{reviewId}
		AND user_id != #{userId}
	</update>
	
	<!-- 추천/신고 여부 확인 -->
	<select id="select_review_mark" resultType="MarkDto">
	    SELECT *
	    FROM review_mark
	    WHERE review_id = #{reviewId}
	    AND user_id = #{userId}
	    AND sort = #{sort}
	</select>
	
	<!-- 추천/신고하기 -->
	<insert id="insert_review_mark" parameterType="MarkDto">
	    INSERT INTO review_mark
	    VALUES ( #{reviewId}, #{userId}, #{sort} )
	</insert>
	
	<!-- 추천/신고 횟수 증가 -->
	<update id="update_review_mark_count">
		UPDATE review_bbs
		SET like_count = (SELECT count(*) FROM review_mark WHERE review_id = #{reviewId} AND sort = 'L'),
			report_count = (SELECT count(*) FROM review_mark WHERE review_id = #{reviewId} AND sort = 'R')
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 추천/신고 횟수 조회 -->
	<select id="select_review_mark_count" resultType="ReviewDto">
		SELECT count(*) like_count FROM review_mark
		WHERE review_id = #{reviewId}
		AND sort = #{sort}
	</select>
	
	<!-- 이미지파일명 저장 -->
	<insert id="insert_review_image" parameterType="ReviewImgDto">
		INSERT INTO review_image (review_id, file_name)
		VALUES ( #{reviewId}, #{fileName} )
	</insert>
	
	<!-- 이미지파일명 조회 -->
	<select id="select_review_image" resultType="ReviewImgDto">
		SELECT review_id, file_name
		FROM review_image
 		WHERE file_name = #{fileName}
	</select>
	
	<!-- 이미지파일명 전부 삭제 -->
	<delete id="delete_review_image">
		DELETE FROM review_image
		WHERE review_id = #{reviewId}
	</delete>
	
	<!-- 글 삭제 -->
	<update id="update_review_delete_at">
		UPDATE review_bbs
		SET delete_at = 'Y', delete_date = SYSDATE
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 글 수정 -->
	<update id="update_review_modify">
		UPDATE review_bbs
		SET title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}, update_date = SYSDATE
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 댓글 작성 -->
	<insert id="insert_comment" parameterType="CommentDto">
		INSERT INTO review_comment (comment_id, comment_lv, review_id, user_id, content, parent_comment_id)
		VALUES ( comment_id_seq.NEXTVAL, #{commentLv}, #{reviewId}, #{userId}, #{content}, #{parentCommentId})
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="update_comment_delete_at">
		UPDATE review_comment
		SET delete_at = 'Y', delete_date = SYSDATE
		WHERE comment_id = #{commentId}
	</update>
	
	<!-- 댓글 수정 -->
	<update id="update_comment_modify">
		UPDATE review_comment
		SET content = #{content}, update_date = SYSDATE
		WHERE comment_id = #{commentId}
	</update>
	
	<!-- 댓글수 수정 -->
	<update id="update_review_comment_count">
		UPDATE review_bbs
		SET comment_count = (SELECT count(*) FROM review_comment
							 WHERE review_id = #{reviewId}
							 AND delete_at = 'N')
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 댓글목록 불러오기 -->
	<select id="select_comment_list" resultType="CommentDto">
		SELECT LEVEL COMMENTLEVEL, rc.comment_lv, rc.comment_id, rc.parent_comment_id, 
			   rc.user_id, rc.delete_at, rc.content, us.nick,
			   TO_CHAR(rc.create_date, 'YY.MM.DD HH:MM') create_date,
			   TO_CHAR(rc.update_date, 'YY.MM.DD HH:MM') update_date
		FROM review_comment rc
		JOIN users us ON rc.user_id = us.user_id
 		WHERE rc.review_id = #{reviewId}
 		AND <!-- 삭제되지 않은 하위계층을 가진 댓글이거나 -->
 			(rc.comment_id IN (SELECT parent_comment_id FROM review_comment WHERE delete_at = 'N')
 			<!-- 삭제되지 않은 하위계층을 가진 댓글의 부모댓글이거나 -->
 			OR rc.comment_id IN (SELECT parent_comment_id FROM review_comment
 							  WHERE comment_id IN (SELECT parent_comment_id FROM review_comment WHERE delete_at = 'N' ))
			<!-- 삭제되지 않은 댓글 -->  
        	OR rc.delete_at = 'N')
		<!-- 계층구조 시작조건 : parent_comment_id가 0인 댓글부터 시작하여 계층형성 -->
		START WITH rc.parent_comment_id = 0
		<!-- 계층구조 연결조건 : 이전 댓글의 id가 현재 댓글의 parent_comment_id와 일치하는 경우 계층형성 -->
		CONNECT BY PRIOR rc.comment_id = rc.parent_comment_id
		<!-- 같은 부모를 가지는 댓글들 중에서 댓글id로 정렬 -->
		ORDER SIBLINGS BY rc.comment_id
	</select>
	
	<!-- 여행 목록 불러오기 (리뷰 작성 가능한 것만) -->
	<select id="select_review_join_list" resultType="JoinDto">
		SELECT plan_id, destination, title, TO_CHAR(end_day, 'YY-MM-DD') end_day, TO_CHAR(start_day, 'YY-MM-DD') start_day
		FROM join_board
 		WHERE SYSDATE > end_day <!-- 여행종료일 기준 -->
 		AND plan_id IN (SELECT plan_id FROM join_board_member WHERE user_id = #{userId}) <!-- 로그인한 아이디로 참여한 여행 -->
 		AND plan_id NOT IN (SELECT plan_id FROM review_bbs
 					   WHERE user_id = #{userId} AND delete_at = 'N' ) <!-- 리뷰 작성한 것 제외 -->
		ORDER BY end_day
	</select>
	
	<!-- 여행 찾기 -->
	<select id="select_review_join" resultType="JoinDto">
		SELECT plan_id, title, destination, TO_CHAR(end_day, 'YY-MM-DD') end_day, TO_CHAR(start_day, 'YY-MM-DD') start_day
		FROM join_board
		WHERE plan_id = #{planId}
	</select>
	
</mapper>